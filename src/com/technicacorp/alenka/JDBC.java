/*
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*/
package com.technicacorp.alenka;
import java.util.Collections;
import java.util.Iterator;

import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.CLong;
import org.bridj.ann.Constructor;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : /hdd/Alenka/jdbc.h:29</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("alenka") 
public class JDBC extends CPPObject {
	public JDBC() {
		super();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:5</i>
	 */
	public enum alenka_types implements IntValuedEnum<alenka_types > {
		alenka_integer(1),
		alenka_float(10),
		alenka_char(100);
		alenka_types(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<alenka_types > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<alenka_types > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// C type : CudaSet*
	@Field(0) 
	public Pointer<CudaSet > cudaSet() {
		return this.io.getPointerField(this, 0);
	}
	/// C type : CudaSet*
	@Field(0) 
	public JDBC cudaSet(Pointer<CudaSet > cudaSet) {
		this.io.setPointerField(this, 0, cudaSet);
		return this;
	}
	/**
	 * Original signature : <code>JDBC(CudaSet*)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:8</i>
	 */
	@Constructor(0) 
	public JDBC(Pointer<CudaSet > cs) {
		super((Void)null, 0, cs);
	}
	/**
	 * Original signature : <code>int getRecordCount()</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:10</i>
	 */
	native public int getRecordCount();
	/**
	 * Original signature : <code>int getColumnCount()</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:12</i>
	 */
	native public int getColumnCount();
	/**
	 * Original signature : <code>void getColumnNames(char**)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:14</i>
	 */
	public void getColumnNames(Pointer<Pointer<Byte > > colNames) {
		getColumnNames(Pointer.getPeer(colNames));
	}
	protected native void getColumnNames(@Ptr long colNames);
	/**
	 * Original signature : <code>void getColumnName(int, char*)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:16</i>
	 */
	public void getColumnName(int colNum, Pointer<Byte > colName) {
		getColumnName(colNum, Pointer.getPeer(colName));
	}
	protected native void getColumnName(int colNum, @Ptr long colName);
	/**
	 * Original signature : <code>alenka_types getColumnTypes(int)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:18</i>
	 */
	public IntValuedEnum<JDBC.alenka_types > getColumnTypes(int colNum) {
		return FlagSet.fromValue(getColumnTypes$2(colNum), JDBC.alenka_types.class);
	}
	@Name("getColumnTypes") 
	protected native int getColumnTypes$2(int colNum);
	/**
	 * Original signature : <code>size_t getColumnSize(int)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:20</i>
	 */
	@Ptr 
	native public long getColumnSize(int colNum);
	/**
	 * Original signature : <code>void retrieveChar(int, int, char*)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:24</i>
	 */
	public void retrieveChar(int rowNum, int colNum, Pointer<Byte > data) {
		retrieveChar(rowNum, colNum, Pointer.getPeer(data));
	}
	protected native void retrieveChar(int rowNum, int colNum, @Ptr long data);
	/**
	 * Original signature : <code>long long retrieveInt(int, int)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:26</i>
	 */
	@CLong 
	native public long retrieveInt(int rowNum, int colNum);
	/**
	 * Original signature : <code>double retrieveFloat(int, int)</code><br>
	 * <i>native declaration : /hdd/Alenka/jdbc.h:28</i>
	 */
	native public double retrieveFloat(int rowNum, int colNum);
	
	public static interface CudaSet {
		
	};
}
